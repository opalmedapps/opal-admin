# Generated by Django 3.2.16 on 2022-12-02 15:18
from django.apps.registry import Apps
from django.db import migrations
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from opal.patients.models import RoleType
from opal.patients import constants


def generate_restricted_roletypes(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    """Generate the restricted role type objects and save to database."""
    RelationshipType = apps.get_model('patients', 'RelationshipType')

    relationship_type_self = RelationshipType.objects.create(
        name='self',
        name_en='SELF',
        name_fr='',
        description_en='A Self role type indicates a patient who owns the data that is being accessed.',
        description_fr='',
        start_age=14,
        role_type=RoleType.SELF,
    )
    relationship_type_self.save()
    relationship_type_parentguardian = RelationshipType.objects.create(
        name='parent/guardian',
        name_en='PARENT/GUARDIAN',
        name_fr='PARENT/TUTEUR',
        description_en='A parent or guardian of a patient.',
        description_fr='',
        start_age=constants.RELATIONSHIP_MIN_AGE,
        end_age=14,
        role_type=RoleType.PARENTGUARDIAN,
    )
    relationship_type_parentguardian.save()


class Migration(migrations.Migration):
    """Pre-populate deployment with the SELF and PARENTGUARDIAN role types."""

    dependencies = [
        ('patients', '0010_relationshiptype_role'),
    ]

    operations = [
        migrations.RunPython(generate_restricted_roletypes, reverse_code=migrations.RunPython.noop),
    ]
