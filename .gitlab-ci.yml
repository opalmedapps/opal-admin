image: python:3.9.15-slim-bullseye

# set up
# see: https://docs.gitlab.com/ee/ci/caching/#cache-python-dependencies
# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  MARIADB_ROOT_PASSWORD: $DB_ROOT_PASSWORD
  # ensure that user has permissions for test DB to be used by pytest
  MARIADB_DATABASE: test_$DB_NAME
  MARIADB_USER: $DB_USER
  MARIADB_PASSWORD: $DB_PASSWORD


before_script:
  - uname -a
  - python --version
  - which python
  # install dependencies for mysqlclient
  - apt update && apt-get install -y build-essential libmariadb-dev
  # don't fail if venv is not set up yet (during setup)
  - source .venv/bin/activate || true
  # set up env file for DB service
  # use sample env file
  - cp .env.sample .env
  - sed -i "s/^DATABASE_HOST=.*/DATABASE_HOST=mariadb/" .env
  - sed -i "s/^DATABASE_NAME=.*/DATABASE_NAME=$DB_NAME/" .env
  - sed -i "s/^DATABASE_USER=.*/DATABASE_USER=$DB_USER/" .env
  - sed -i "s/^DATABASE_PASSWORD=.*/DATABASE_PASSWORD=$DB_PASSWORD/" .env
  # set up legacy DB connection
  # reuse the same database as for the other tests to make it easier
  - sed -i "s/^LEGACY_DATABASE_HOST=.*/LEGACY_DATABASE_HOST=mariadb/" .env
  - sed -i "s/^LEGACY_DATABASE_PORT=.*/LEGACY_DATABASE_PORT=3306/" .env
  - sed -i "s/^LEGACY_DATABASE_NAME=.*/LEGACY_DATABASE_NAME=OpalDB/" .env
  - sed -i "s/^LEGACY_DATABASE_USER=.*/LEGACY_DATABASE_USER=$DB_USER/" .env
  - sed -i "s/^LEGACY_DATABASE_PASSWORD=.*/LEGACY_DATABASE_PASSWORD=$DB_PASSWORD/" .env
  # generate secret key
  - SECRET_KEY=$(python -c "import secrets; print(secrets.token_urlsafe())")
  - sed -i "s/^SECRET_KEY=.*/SECRET_KEY=$SECRET_KEY/" .env

stages:
  - Static Analysis
  - Checks
  - Test
  - Build
  - Documentation

setup:
  stage: .pre
  script:
    - apt update && apt-get install -y git
    - python -m venv .venv
    - source .venv/bin/activate
    - pip install --upgrade pip
    - pip install -r requirements/development.txt
  artifacts:
    # pin artifacts to the branch
    # see: https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html#use-cicd-variables-to-define-the-artifacts-name
    name: $CI_COMMIT_REF_SLUG
    expire_in: 1 week
    paths:
      - .venv
  # Pip's cache doesn't store the python packages
  # https://pip.pypa.io/en/stable/reference/pip_install/#caching
  #
  # If you want to also cache the installed packages, you have to install
  # them in a virtualenv and cache it as well.
  cache:
    # pin artifacts to the branch
    # see: https://docs.gitlab.com/ee/ci/pipelines/job_artifacts.html#use-cicd-variables-to-define-the-artifacts-name
    paths:
      - .cache/pip

flake8:
  stage: Static Analysis
  script:
    - flake8 --version
    # install plugin to produce code climate report
    - pip install flake8-gl-codeclimate
    - flake8 --format gl-codeclimate --output-file gl-code-quality-report.json
  artifacts:
    when: always
    reports:
      codequality: gl-code-quality-report.json

mypy:
  stage: Static Analysis
  script:
    - mypy --version
    - mypy opal/

markdownlint:
  stage: Static Analysis
  image:
    name: davidanson/markdownlint-cli2:v0.5.1
    # overwrite default entrypoint (which is a call to markdownlint-cli2)
    entrypoint: [""]
  # this is not a Python script so we don't need to do all this extra stuff
  before_script:
    - markdownlint-cli2 --version
    # install our custom GitLab formatter to convert output to code quality artefact
    - npm install .gitlab/markdownlint/markdownlint-cli2-formatter-gitlab
  script:
    # use the config file that is stored outside the root
    - markdownlint-cli2-config .gitlab/markdownlint/.markdownlint-cli2.yaml "**/*.md" "#.venv" "#node_modules"
  artifacts:
    when: always
    reports:
      codequality: markdownlint-cli2-results.json

test:
  stage: Test
  # set up DB service only for the test job since it is not used by others
  services:
    - mariadb:10.7.1-focal
  script:
    # create second DB for legacy DB tests
    - apt update && apt-get install -y default-mysql-client
    - MYSQL_PWD=$DB_ROOT_PASSWORD mysql -uroot -hmariadb -e "GRANT ALL PRIVILEGES ON \`test_OpalDB\`.* TO \`$MARIADB_USER\`@\`%\`;"
    - pytest --version
    - coverage run -m pytest --junitxml=report.xml
  needs:
    - job: setup
  artifacts:
    when: always
    reports:
      junit: report.xml
    paths:
      - .coverage

coverage:
  stage: Test
  script:
    - coverage xml
    - coverage report
  needs:
    - job: test
    - job: setup
  coverage: '/^TOTAL.+?(\d+\%)$/'
  artifacts:
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

django:
  stage: Checks
  script:
    # install dependencies for makemessages and git diff
    - apt update && apt-get install -y gettext git
    # Missing migrations
    - echo "Checking that there are no model changes for which there is no migration..."
    - python manage.py makemigrations --dry-run --check
    # Missing translation file updates
    - echo "Checking that translation files have been updated ..."
    - python manage.py makemessages --add-location file -l fr
    - git diff --ignore-matching-lines=POT-Creation-Date --exit-code
    # Ensure there are no fuzzy translation strings
    - echo "Checking for presence of fuzzy translation strings (need updates) ..."
    - FUZZY_STRINGS=$(grep --include=\*.po -rnw './opal' -e "#, fuzzy" -B01 -A02 | grep '#| msgid' -B02 -A01 || true)
    - >
        if [[ $FUZZY_STRINGS ]]; then
          echo "$FUZZY_STRINGS"
          (! echo "$FUZZY_STRINGS" | grep -q .)
        fi
    # Prevent auto-named migrations
    - echo "Checking that migrations are not auto-named ..."
    # See: https://adamj.eu/tech/2020/02/24/how-to-disallow-auto-named-django-migrations/
    # Return exit code of 1 if results found, 0 otherwise
    # See: https://serverfault.com/q/225798 and https://stackoverflow.com/a/53753605
    - (! find ./opal -regex '.*/migrations/.*_auto_.*\.py$' | grep -q .)
    # Run checks to be sure we follow all django's best practices:
    - echo "Checking that all Django checks pass ..."
    - python manage.py check --fail-level WARNING
    # Check templates
    - echo "Validating templates ..."
    - python manage.py validate_templates
  needs:
    - job: setup

# Try building the documentation site to ensure there are no issues
build docs:
  stage: Build
  script:
    - pip install -r requirements/docs.txt
    - mkdocs --version
    # abort on warnings to catch invalid cross-references
    - mkdocs build --strict
  # cannot restrict to only merge requests due to the following issue:
  # https://gitlab.com/gitlab-org/gitlab/-/issues/31310
  needs:
    - job: setup
    - job: markdownlint

# Publish docs to GitLab Pages
# see: https://squidfunk.github.io/mkdocs-material/publishing-your-site/#gitlab-pages
#
pages:
  stage: Documentation
  only:
    - main
  script:
    - pip install --upgrade pip
    - pip install -r requirements/docs.txt
    - mkdocs build --site-dir public
  artifacts:
    paths:
      - public
